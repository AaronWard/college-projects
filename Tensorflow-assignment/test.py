'''
This neural network is part of an assignment for Computational intelligence
It takes two inputs from a CSV file for training with tensorflow

This script is for evaulating the trained model generated by the tensorflow
session in train.py

@author: Aaron Ward - B00079288
'''
import tensorflow as tf 
import csv
import time
import numpy as np
###################################################################################################


# Number of training or evaluation examples - Dont Change
NUM_EXAMPLES = 100
 # Number of inputs - Dont Change
NUM_INPUTS = 2 
# Number of output features or class labels - Dont Change
NUM_LABELS = 1	
# Number of hiden/middle layer nodes
NUM_HIDDEN = 8

#Import trained model and testing set
INPUT_FILE = 'data/eval.csv'
TRAINED_MODEL = 'data/trained_model.ckpt'

# Array for the input features
x = []
# Array for the output labels/features
y = []

# import training data
file  = open(INPUT_FILE, "r")
input_data = csv.reader(file, delimiter=',')
for row in input_data:
    x.append([float(row[0]), float(row[1])])
    y.append([float(row[2])])

###################################################################################################
'''
Define weights and biases using placeholders
'''

x_ = tf.placeholder(tf.float32, shape=[NUM_EXAMPLES, NUM_INPUTS], name = 'inputs')
y_ = tf.placeholder(tf.float32, shape=[NUM_EXAMPLES, NUM_LABELS], name = 'labels')

weights = {
    'w_1': tf.Variable(tf.random_uniform([NUM_INPUTS, NUM_HIDDEN], -1, 1)),
    'out': tf.Variable(tf.random_uniform([NUM_HIDDEN, NUM_LABELS], -1, 1))
}

biases = {
    'b_1': tf.Variable(tf.zeros([NUM_HIDDEN])),
    'out': tf.Variable(tf.zeros([NUM_LABELS]))
}

# One hidden layer and one output layer
layer_1 = tf.sigmoid(tf.matmul(x_, weights['w_1']) + biases['b_1'])
output_layer = tf.sigmoid(tf.matmul(layer_1, weights['out']) + biases['out'])

###################################################################################################

# Predicted output - expected output
cost = tf.reduce_sum(tf.square(output_layer - y_))

###################################################################################################
'''
Running a Tensorflow session to restore the trained model in the data directory and 
and feed new data to test the error.

'''
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    saver = tf.train.Saver()
    saver.restore(sess, TRAINED_MODEL)
    print("### TRAIN MODEL RETRIEVED ###")

    average_err = 0
    t_start = time.clock()
    out, cst = sess.run([output_layer, cost], feed_dict={x_: x, y_: y})
    for i in range(len(out)):
        err = abs(out[i] - y[i])
        print("Output:", out[i], '\t - Label Y: ', y[i], '\t - Error: ', err, '\t - Cost: ', cst )
        average_err += err
    average_err = average_err/len(out)

    t_end = time.clock()
print('\n###################################################################################################')
print('Elapsed time:', t_end - t_start)
print('Average Error', average_err)
print('###################################################################################################')


###################################################################################################





